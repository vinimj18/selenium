NAMING:
    Pytest file names should start with 'test_'
    Test methods should also start with 'test_'

Run tests in the console:
    py.test - Run the tests showing how many passed or failed with no other info
    FILE_NAME - Add the file name to run the tests in that specific file
    -v - verbose mode, shows more info on the tests
    -s - shows the final result from each test module
        Example: py.test test_lesson069_test1.py -v -s
    
    -k KEY_WORD - run only tests that have the provided keyword in the method name
    (Test names must be meaningful to help the use of keyword filters k- parser)
        Example: py.test -k CreditCard -v -s

DECORATORS:

Marking a test:
    Add decorator pytest.mark.TAG
    You can put any tag and then run the marked tests using the -m TAG parser
        Example: py.test -m smoke -v -s   [ decorator = @pytest.mark.smoke]

Skipping a test:
    You can skip a test by marking it on the decorator:
        @pytest.mark.skip

xfail:
    If you skip a test it will skip the whole action. So if your test has an
    operation that is necessary to other tests use the decorator mark xfail:
        @pytest.mark.xfail
    It will run the test but it will no show on the report.

Fixtures:
    Are steps that are not tests but are required to be executed before or after
    the tests.
        @pytest.fixture()
        def setup():

    Then apply the decorated function to the test argument:
        def test_fixture_demo(setup)

    This will make the fixture to be run before the test.
    You can also add an yield command to have steps run after the tests
        @pytest.fixture()
        def setup():
            print('this will run before the tests')
            yield
            print('this will run after the tests')

    Some fixtures will be used in more than one file. In this case you can write
    all the fixtures in a file called conftest.py and pytest will automatically
    retrieve the fixtures from that file, making it available to all test cases.

    In case you have many tests that use the same fixture in the same test case
    you can optimize the code by wrapping all tests inside a class and decorating
    it with @pytest.mark.usefixtures("FIXTURE_NAME"):

        @pytest.mark.usefixtures("setup")
        class TestExecution():
            def test_fixture_demo1(self):
                print('I will execute inside the fixture_demo1')

            def test_fixture_demo2(self):
                print('I will execute inside the fixture_demo2')

            def test_fixture_demo3(self):
                print('I will execute inside the fixture_demo3')

    In order to make your last portion of the fixture to run after the execution
    of all the tests in the class instead of each test, just change the fixture
    scope by addin the following argument to the decorator:
        @pytest.fixture(scope='class')

    When your fixture method return something, that something must be passed as 
    a parameter to the test function:
        @pytest.fixture()
        def data_load():
            print('Data is being retrieved')
            return ['Vinicius', 'Justen', 'vinimj.lixo18@gmail.com']

        @pytest.mark.usefixtures('data_load')
        class TestData():
            def test_edit_profile(self, data_load):
                print(data_load[0])

    You can run a single test with multiple parameter. Just add those parameters
    to the fixture:

        @pytest.fixture(params=['Chrome', 'Firefox', 'IE'])
        def cross_browser(request):
            return request.param

    The test will run as many times as the amount of parameters provided. In the
    example above, it will run 3 times. One for each browser in the list of parameters.

HTML Reports

    pip install pytest-html

    Just add another parser when running the tests  --html=report.html